/*
 * Copyright 2023-2024 secp256k1-jdk Developers.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by jextract

package org.bitcoinj.secp.ffm.jextract;

import java.lang.invoke.*;
import java.lang.foreign.*;

/**
 * {@snippet lang=c :
 * typedef int (*secp256k1_nonce_function)(unsigned char *, const unsigned char *, const unsigned char *, const unsigned char *, void *, unsigned int)
 * }
 */
public class secp256k1_nonce_function {

    secp256k1_nonce_function() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        int apply(MemorySegment nonce32, MemorySegment msg32, MemorySegment key32, MemorySegment algo16, MemorySegment data, int attempt);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
        secp256k1_h.C_INT,
        secp256k1_h.C_POINTER,
        secp256k1_h.C_POINTER,
        secp256k1_h.C_POINTER,
        secp256k1_h.C_POINTER,
        secp256k1_h.C_POINTER,
        secp256k1_h.C_INT
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = secp256k1_h.upcallHandle(secp256k1_nonce_function.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(secp256k1_nonce_function.Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static int invoke(MemorySegment funcPtr,MemorySegment nonce32, MemorySegment msg32, MemorySegment key32, MemorySegment algo16, MemorySegment data, int attempt) {
        try {
            return (int) DOWN$MH.invokeExact(funcPtr, nonce32, msg32, key32, algo16, data, attempt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}

