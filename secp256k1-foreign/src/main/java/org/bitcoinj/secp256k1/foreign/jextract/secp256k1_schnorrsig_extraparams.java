// Generated by jextract

package org.bitcoinj.secp256k1.foreign.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet lang=c :
 * struct secp256k1_schnorrsig_extraparams {
 *     unsigned char magic[4];
 *     int (*noncefp)(unsigned char*,unsigned char*,unsigned long,unsigned char*,unsigned char*,unsigned char*,unsigned long,void*);
 *     void* ndata;
 * };
 * }
 */
public class secp256k1_schnorrsig_extraparams {

    public static MemoryLayout $LAYOUT() {
        return constants$13.const$1;
    }
    public static MemorySegment magic$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    /**
     * {@snippet lang=c :
 * int (*noncefp)(unsigned char*,unsigned char*,unsigned long,unsigned char*,unsigned char*,unsigned char*,unsigned long,void*);
     * }
     */
    public interface noncefp {

        int apply(java.lang.foreign.MemorySegment nonce32, java.lang.foreign.MemorySegment msg, long msglen, java.lang.foreign.MemorySegment key32, java.lang.foreign.MemorySegment xonly_pk32, java.lang.foreign.MemorySegment algo, long algolen, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(noncefp fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$13.const$2, fi, constants$12.const$2, scope);
        }
        static noncefp ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _nonce32, java.lang.foreign.MemorySegment _msg, long _msglen, java.lang.foreign.MemorySegment _key32, java.lang.foreign.MemorySegment _xonly_pk32, java.lang.foreign.MemorySegment _algo, long _algolen, java.lang.foreign.MemorySegment _data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _nonce32, _msg, _msglen, _key32, _xonly_pk32, _algo, _algolen, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle noncefp$VH() {
        return constants$13.const$3;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*noncefp)(unsigned char*,unsigned char*,unsigned long,unsigned char*,unsigned char*,unsigned char*,unsigned long,void*);
     * }
     */
    public static MemorySegment noncefp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*noncefp)(unsigned char*,unsigned char*,unsigned long,unsigned char*,unsigned char*,unsigned char*,unsigned long,void*);
     * }
     */
    public static void noncefp$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$3.set(seg, x);
    }
    public static MemorySegment noncefp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void noncefp$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static noncefp noncefp(MemorySegment segment, Arena scope) {
        return noncefp.ofAddress(noncefp$get(segment), scope);
    }
    public static VarHandle ndata$VH() {
        return constants$13.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * void* ndata;
     * }
     */
    public static MemorySegment ndata$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * void* ndata;
     * }
     */
    public static void ndata$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$4.set(seg, x);
    }
    public static MemorySegment ndata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ndata$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


