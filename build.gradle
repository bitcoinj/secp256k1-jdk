plugins {
    id 'com.github.hierynomus.license'      version '0.16.1' apply false
}

// Projects to be published with maven-publish
ext.publishedProjects = ['secp-api', 'secp-ffm', 'secp-bouncy']

subprojects { sub ->
    apply plugin: 'java'
    apply plugin: 'groovy'
    //apply plugin: 'test-report-aggregation'

    version = secpVersion     // set in gradle.properties
    group = 'org.bitcoinj.secp'

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.13.2'
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.13.2"
        testImplementation "org.junit.jupiter:junit-jupiter-params:5.13.2"
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.13.2"
    }

    java {
        if (sub.name in publishedProjects) {
            withJavadocJar()
        }
        withSourcesJar()
        toolchain {
            // `languageVersion` is used to configure the "Java Toolchain" used for the build. This includes `javac`,
            // `jlink`, and the `jpackage` tool.
            //  See `gradle.properties` for the setting of `javaToolchainVersion` and other setting that are used
            // to find and/or download JDK versions.
            languageVersion = JavaLanguageVersion.of(javaToolchainVersion)
            vendor = JvmVendorSpec.matching(javaToolchainVendor)
        }
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile).configureEach {
        // Default release version, secp-api and secp-bouncy override this to set an earlier release.
        options.release = 24
    }

    // Workaround for System Integrity Protection on macOS that can set `DYLD_LIBRARY_PATH` to `null` when
    // Gradle is launched with `/bin/sh` (for example by `gradlew`)
    def secpLibPath = System.getenv('LD_LIBRARY_PATH') ?: System.getenv('DYLD_LIBRARY_PATH') ?: System.getenv('SECP256K1_LIBRARY_PATH')
    if (secpLibPath == null || secpLibPath == "") {
        println "\nA path to libsecp256k1 must be configured via an environment variable.\n"
        println "On Linux this should be LD_LIBRARY_PATH.\n"
        println "On macOS this is usually DYLD_LIBRARY_PATH, but System Integrity Protection may be setting this to `null`,"
        println "so on macOS we use SECP256K1_LIBRARY_PATH as a fallback to handle this case.\n"
        throw new IllegalArgumentException("A path to libsecp256k1 must be configured via an environment variable.")
    }

    tasks.withType(JavaExec).configureEach {
        systemProperty "java.library.path", secpLibPath
    }

    tasks.withType(Test).configureEach {
        systemProperty "java.library.path", secpLibPath
    }
}

apply from: 'gradle/licenseCheck.gradle'
apply from: 'gradle/maven-publish.gradle'

